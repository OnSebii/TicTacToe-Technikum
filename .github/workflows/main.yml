name: main
on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 20
        uses: actions/setup-java@v4.2.1
        with:
          java-version: 20
          distribution: temurin

      - name: Install dependencies and run tests
        run: mvn test --file pom.xml

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v4.1.7

      - name: Set up JDK 20
        uses: actions/setup-java@v4.2.1
        with:
          java-version: 20
          distribution: temurin

      - name: Package the application
        run: mvn package --file pom.xml

      - name: Verify JAR files
        run: |
          echo "Listing files in target directory:"
          ls -la target/

      - name: Determine JAR filename
        id: get_jar
        run: |
          JAR_FILE=$(ls target/*.jar)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          version=${LATEST_TAG#v}
          major=$(echo $version | cut -d. -f1)
          minor=$(echo $version | cut -d. -f2)
          patch=$(echo $version | cut -d. -f3)
          new_patch=$((patch + 1))
          new_version="v${major}.${minor}.${new_patch}"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      - name: Check if the tag already exists
        id: check_tag_exists
        run: |
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Tag $NEW_VERSION already exists, skipping release."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        if: env.SKIP_RELEASE == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release ${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false

      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        if: env.SKIP_RELEASE == 'false'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.JAR_FILE }}
          asset_name: TicTacToe-Technikum.jar # Adjust the name as needed
          asset_content_type: application/java-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  